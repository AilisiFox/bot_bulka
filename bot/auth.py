import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from models import User, DatabaseManager

logger = logging.getLogger(__name__)

class AuthenticationManager:
    def __init__(self, db_manager: DatabaseManager):
        self.user_model = User(db_manager)
        self.pending_auth = {}
    
    async def is_authenticated(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        return self.user_model.get_user_by_telegram_id(telegram_id)
    
    async def start_authentication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        telegram_id = update.effective_user.id

        user = await self.is_authenticated(telegram_id)
        if user:
            await self.show_main_menu(update, context, user)
            return

        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∏ —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")
            ]])
        )

        context.user_data['awaiting_login'] = True
    
    async def handle_login_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.user_data.get('awaiting_login'):
            return
        
        login = update.message.text.strip()
        telegram_id = update.effective_user.id
        user_info = self.user_model.authenticate_user(login)
        
        if user_info:
            if user_info['telegram_id'] and user_info['telegram_id'] != telegram_id:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É."
                )
                context.user_data['awaiting_login'] = False
                return

            if not user_info['telegram_id']:
                success = self.user_model.bind_telegram_id(
                    login, telegram_id, user_info['user_type']
                )
                if not success:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )
                    return

            context.user_data['awaiting_login'] = False

            user = await self.is_authenticated(telegram_id)
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']} {user['last_name']}!\n"
                f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {'–£—á–∏—Ç–µ–ª—å' if user['user_type'] == 'teacher' else '–£—á–µ–Ω–∏–∫'}"
            )
            
            await self.show_main_menu(update, context, user)
            
        else:
            await update.message.reply_text(
                "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")
                ]])
            )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: Dict[str, Any]):
        if user['user_type'] == 'teacher':
            keyboard = [
                [InlineKeyboardButton("üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
                [InlineKeyboardButton("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ò–ò", callback_data="ai_tasks")],
                [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            text = f"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']} {user['last_name']}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            keyboard = [
                [InlineKeyboardButton("üìÖ –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
                [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings")],
                [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
            ]
            text = f"üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['first_name']} {user['last_name']}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def handle_cancel_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        context.user_data['awaiting_login'] = False
        await update.callback_query.edit_message_text(
            "‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
        )
    
    async def logout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        telegram_id = update.effective_user.id  # noqa: F841

        context.user_data.clear()
        
        await update.message.reply_text(
            "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        )