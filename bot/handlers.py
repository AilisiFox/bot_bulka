import logging
from datetime import datetime, date
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from models import ScheduleManager, User, DatabaseManager
from config import Config

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.schedule_manager = ScheduleManager(db_manager)
        self.user_model = User(db_manager)
    
    async def handle_view_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: Dict[str, Any]):
        try:
            schedule = self.schedule_manager.get_user_schedule(
                user['id'], 
                user['user_type']
            )
            
            if not schedule:
                await update.callback_query.edit_message_text(
                    "üìÖ **–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
                return

            message = "üìÖ **–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**\n\n"
            
            current_date = None
            for lesson in schedule:
                lesson_date = datetime.fromisoformat(lesson['lesson_date']).date()
                lesson_time = lesson['lesson_time']
                subject = lesson['subject'] or '–£—Ä–æ–∫'

                if current_date != lesson_date:
                    current_date = lesson_date
                    date_str = lesson_date.strftime("%d.%m.%Y (%A)")
                    message += f"\nüìÜ **{date_str}**\n"

                if user['user_type'] == 'teacher':
                    partner_name = f"{lesson['student_first_name']} {lesson['student_last_name']}"
                    icon = "üë®‚Äçüéì"
                else:
                    partner_name = f"{lesson['teacher_first_name']} {lesson['teacher_last_name']}"
                    icon = "üë®‚Äçüè´"
                
                message += f"üïê {lesson_time} - {subject}\n"
                message += f"{icon} {partner_name}\n"
                message += f"‚è± {lesson['duration_minutes']} –º–∏–Ω\n\n"

            keyboard = [
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="schedule_today")],
                [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        except Exception as e:
            logger.error(f"Error viewing schedule: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def handle_schedule_filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     user: Dict[str, Any], filter_type: str):
        try:
            today = date.today()
            if filter_type == "today":
                target_date = today
                date_title = "–°–µ–≥–æ–¥–Ω—è"
            else:
                from datetime import timedelta
                target_date = today + timedelta(days=1)
                date_title = "–ó–∞–≤—Ç—Ä–∞"
            
            schedule = self.schedule_manager.get_user_schedule(
                user['id'], 
                user['user_type'],
                target_date
            )
            
            if not schedule:
                message = f"üìÖ **{date_title}**\n\n–£—Ä–æ–∫–æ–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ."
            else:
                message = f"üìÖ **{date_title} ({target_date.strftime('%d.%m.%Y')})**\n\n"
                
                for lesson in schedule:
                    lesson_time = lesson['lesson_time']
                    subject = lesson['subject'] or '–£—Ä–æ–∫'
                    
                    if user['user_type'] == 'teacher':
                        partner_name = f"{lesson['student_first_name']} {lesson['student_last_name']}"
                        icon = "üë®‚Äçüéì"
                    else:
                        partner_name = f"{lesson['teacher_first_name']} {lesson['teacher_last_name']}"
                        icon = "üë®‚Äçüè´"
                    
                    message += f"üïê {lesson_time} - {subject}\n"
                    message += f"{icon} {partner_name}\n"
                    message += f"‚è± {lesson['duration_minutes']} –º–∏–Ω\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üìÖ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="view_schedule")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            await update.callback_query.edit_message_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        except Exception as e:
            logger.error(f"Error filtering schedule: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def handle_ai_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = (
            "ü§ñ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, "
            "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n"
            f"üîó {Config.AI_CHAT_URL}\n\n"
            "–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –ª—é–±—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤\n"
            "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥ —Ä–∞–∑–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–æ–≤"
        )
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –ò–ò —á–∞—Ç", url=Config.AI_CHAT_URL)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_reminder_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: Dict[str, Any]):
        current_setting = "–≤–∫–ª—é—á–µ–Ω—ã" if user['reminder_enabled'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        
        message = (
            f"üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_setting}\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∑–∞ {Config.REMINDER_MINUTES_BEFORE} –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = []
        if user['reminder_enabled']:
            keyboard.append([InlineKeyboardButton("üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="toggle_reminders_off")])
        else:
            keyboard.append([InlineKeyboardButton("üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="toggle_reminders_on")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_toggle_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                    user: Dict[str, Any], enable: bool):
        success = self.user_model.update_reminder_setting(user['telegram_id'], enable)
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if enable else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ {status}!"
        else:
            message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        
        keyboard = [
            [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: Dict[str, Any]):
        if user['user_type'] == 'teacher':
            message = (
                "‚ÑπÔ∏è **–ü–æ–º–æ—â—å - –£—á–∏—Ç–µ–ª—å**\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n"
                "üìÖ **–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤\n"
                "ü§ñ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –ò–ò** - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
                "**–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n\n"
                "**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n"
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {Config.REMINDER_MINUTES_BEFORE} –º–∏–Ω—É—Ç –¥–æ —É—Ä–æ–∫–∞.\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
        else:
            message = (
                "‚ÑπÔ∏è **–ü–æ–º–æ—â—å - –£—á–µ–Ω–∏–∫**\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n"
                "üìÖ **–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤\n"
                "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n"
                "**–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n\n"
                "**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n"
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {Config.REMINDER_MINUTES_BEFORE} –º–∏–Ω—É—Ç –¥–æ —É—Ä–æ–∫–∞.\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )